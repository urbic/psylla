<?xml version="1.0" encoding="UTF-8"?>
<project
	name="psylla"
	default="jar"
	xmlns:if="ant:if"
	xmlns:unless="ant:unless"
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:cs="antlib:com.puppycrawl.tools.checkstyle.ant"
	>

	<description>${project.description}</description>

	<!-- Properties -->
	<property name="etc" location="etc"/>
	<property name="src" location="src"/>
	<property name="src.main" location="${src}/main"/>
	<property name="src.test" location="${src}/test"/>
	<property name="src.examples" location="${src}/examples"/>
	<property name="src.main.java" location="${src.main}/java"/>
	<property name="src.main.psylla" location="${src.main}/psylla"/>
	<property name="src.main.resources" location="${src.main}/resources"/>
	<property name="src.test.java" location="${src.test}/java"/>
	<property name="src.test.psylla" location="${src.test}/psylla"/>
	<property name="src.test.data" location="${src.test}/data"/>
	<property name="src.main.jj" location="${src.main}/jj"/>
	<property name="src.examples.psylla" location="${src.examples}/psylla"/>
	<property name="src.examples.java" location="${src.examples}/java"/>
	<property name="src.doc" location="${src}/doc"/>
	<property name="src.doc.xhtml" location="${src.doc}/xhtml"/>
	<property name="src.doc.xsl" location="${src.doc}/xsl"/>
	<property name="src.doc.docbook" location="${src.doc}/docbook"/>
	<property name="src.doc.scss" location="${src.doc}/scss"/>
	<property name="src.ant" location="${src}/ant"/>
	<property name="src.bin" location="${src}/bin"/>
	<property name="src.css" location="${src}/css"/>
	<property name="src.vim" location="${src}/vim"/>
	<property name="src.maven" location="${src}/maven"/>
	<property name="src.mime" location="${src}/mime"/>
	<property name="src.logo" location="${src}/logo"/>
	<property name="target" location="target"/>
	<property name="target.src.main" location="${target}/src/main"/>
	<property name="target.src.main.java" location="${target.src.main}/java"/>
	<property name="target.doc" location="${target}/doc"/>
	<property name="target.doc.apidocs" location="${target.doc}/apidocs"/>
	<property name="target.dot" location="${target}/dot"/>
	<property name="target.modules" location="${target}/modules"/>
	<property name="target.artifacts" location="${target}/artifacts"/>
	<property name="target.artifacts.jars" location="${target.artifacts}/jars"/>
	<property name="target.artifacts.poms" location="${target.artifacts}/poms"/>
	<property name="target.bin" location="${target}/bin"/>
	<property name="target.obs" location="${target}/obs"/>
	<property name="target.man" location="${target}/man"/>
	<property name="target.doc.html" location="${target.doc}/html"/>
	<property name="target.vim" location="${target}/vim"/>
	<property name="target.mime" location="${target}/mime"/>
	<property name="target.reports" location="${target}/reports"/>
	<property name="file.encoding" value="UTF-8"/>
	<property name="linux.flavour" value="redhat"/>
	<!--property name="build.sysclasspath" value="ignore"/-->
	<property name="java.release" value="21"/>
	<!--property name="ivy.cache.ttl.default" value="eternal"/-->

	<property file="${src.ant}/ivy.properties"/>
	<property file="${src.ant}/version.properties"/>
	<property file="${src.ant}/config.properties"/>
	<property file="${src.ant}/config-${linux.flavour}.properties"/>

	<path id="modulesourcepath.main">
		<pathelement location="${src.main.java}"/>
		<pathelement location="${src.examples.java}"/>
		<pathelement location="${target.src.main.java}"/>
	</path>

	<path id="modulesourcepath.test">
		<!--pathelement location="${src.test.java}"/-->
	</path>

	<path id="modulesourcepath.examples">
		<pathelement location="${src.examples.java}"/>
	</path>

	<path id="modulepath.main">
		<path refid="modulepath.main.resolved"/>
		<dirset
			dir="${target.modules}"
			includes="${project.moduleprefix}*"
			/>
	</path>

	<path id="classpath.main">
		<path refid="classpath.main.resolved"/>
	</path>

	<path id="classpath.xslt">
		<!--pathelement location="${config.jar.saxon6}"/-->
		<!--pathelement location="${config.jar.xslthl}"/-->
		<pathelement location="${config.jar.xerces}"/>
		<pathelement location="${config.jar.docbook-xsl-saxon}"/>
		<path refid="classpath.xslt.resolved"/>
	</path>

	<xmlcatalog id="xmlcatalog.xslt">
		<catalogpath>
			<pathelement location="${config.sysconfdir}/xml/catalog"/>
			<pathelement location="${config.sysconfdir}/xml/docbook5-xsl-stylesheets.xml"/>
			<pathelement location="${config.sysconfdir}/xml/docbook-xsl-ns.xml"/>
			<pathelement location="${config.sysconfdir}/xml/w3-dtd--mathml.xml"/>
		</catalogpath>
	</xmlcatalog>

	<!-- Import supplementary Ant projects -->
	<import file="${src.ant}/test.ant"/>
	<import file="${src.ant}/test-examples.ant"/>
	<import file="${src.ant}/htmldocs.ant"/>
	<import file="${src.ant}/manpages.ant"/>
	<import file="${src.ant}/install.ant"/>
	<import file="${src.ant}/obs.ant"/>

	<target name="resolve" description="Retrieve dependencies with Ivy">
		<ivy:resolve conf="main,xslt,linux.${linux.flavour}"/>
	</target>

	<target name="compile.jj"
		description="Compile JJ sources"
		>
		<mkdir
			dir="${target.src.main.java}/${project.moduleprefix}/coneforest/psylla/runtime/parser"/>
		<dirname property="javacc.home" file="${config.jar.javacc}"/>
		<javacc
			target="${src.main.jj}/${project.moduleprefix}/coneforest/psylla/runtime/parser/Parser.jj"
			outputdirectory="${target.src.main.java}/${project.moduleprefix}/coneforest/psylla/runtime/parser"
			unicodeinput="true"
			static="false"
			javacchome="${javacc.home}"
			/>
	</target>

	<target name="compile.java"
		description="Compile Java sources"
		depends="copy.resources,compile.jj"
		>
		<ivy:cachepath conf="main+classpath" pathid="classpath.main.resolved"/>
		<ivy:cachepath conf="main+modulepath" pathid="modulepath.main.resolved"/>
		<javac
			destdir="${target.modules}"
			release="${java.release}"
			includeantruntime="false"
			encoding="UTF-8"
			createMissingPackageInfoClass="false"
			debug="true"
			>
			<modulesourcepath refid="modulesourcepath.main"/>
			<modulepath refid="modulepath.main"/>
			<classpath refid="classpath.main"/>
			<include name="coneforest/psylla/processors/*.java"/>
			<include name="coneforest/psylla/runtime/Type.java"/>
			<include name="coneforest/psylla/runtime/ErrorType.java"/>
			<include name="coneforest/psylla/runtime/OperatorType.java"/>
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-proc:none"/>
			<compilerarg value="-Xdiags:verbose"/>
			<compilerarg value="-implicit:none"/>
			<compilerarg value="--add-reads=${project.moduleprefix}=ALL-UNNAMED"/>
			<compilerarg value="--add-reads=${project.moduleprefix}.processors=ALL-UNNAMED"/>
		</javac>
		<mkdir dir="${target.modules}/${project.moduleprefix}/META-INF/${project.name}/error"/>
		<mkdir dir="${target.modules}/${project.moduleprefix}/META-INF/${project.name}/operator"/>
		<mkdir dir="${target.modules}/${project.moduleprefix}/META-INF/${project.name}/type"/>
		<mkdir dir="${target.dot}"/>
		<javac
			destdir="${target.modules}"
			release="${java.release}"
			includeantruntime="false"
			encoding="UTF-8"
			createMissingPackageInfoClass="false"
			debug="true"
			>
			<modulesourcepath refid="modulesourcepath.main"/>
			<modulesourcepath refid="modulesourcepath.examples"/>
			<modulesourcepath refid="modulesourcepath.test"/>
			<modulepath refid="modulepath.main"/>
			<classpath refid="classpath.main"/>
			<compilerarg
				value="--processor-path=${target.modules}/${project.moduleprefix}:${target.modules}/${project.moduleprefix}.processors"/>
			<compilerarg value="-XprintProcessorInfo"/>
			<compilerarg value="-Xprefer:source"/>
			<compilerarg value="-Xlint:deprecation"/>
			<!--compilerarg value="-Xlint:unchecked"/-->
			<compilerarg value="-Xlint:all,-missing-explicit-ctor,-exports"/>
			<compilerarg value="-Xmaxwarns"/>
			<compilerarg value="1000"/>
			<compilerarg value="-Xmaxerrs"/>
			<compilerarg value="1000"/>
			<compilerarg
				value="-Aconeforest.psylla.processors.TypeMetadataCollector.metadataDir=${target.modules}/${project.moduleprefix}/META-INF/${project.name}"/>
			<compilerarg value="-Aconeforest.psylla.processors.TypeHierarchyBuilder.outputDir=${target.dot}"/>
			<compilerarg value="-Xdiags:verbose"/>
			<compilerarg value="-implicit:class"/>
			<compilerarg value="--add-reads=${project.moduleprefix}=ALL-UNNAMED"/>
			<compilerarg value="--add-reads=${project.moduleprefix}.ant=ALL-UNNAMED"/>
		</javac>
	</target>

	<target name="compile"
		description="Compile sources"
		depends="compile.jj,compile.java"
		/>

	<target name="docs"
		description="Build documentation"
		depends="manpages,apidocs,htmldocs"
		/>

	<target name="apidocs"
		description="Build API documentation"
		depends="jar"
		>
		<javadoc
			destdir="${target.doc.apidocs}"
			access="public"
			encoding="UTF-8"
			charset="UTF-8"
			doctitle="${project.title} ${project.version}"
			windowtitle="${project.title} ${project.version}"
			bottom="Copyright © 2014—2025 ${project.developer.name}"
			>
			<module name="${project.moduleprefix}"/>
			<module name="${project.moduleprefix}.ant"/>
			<module name="${project.moduleprefix}.processors"/>
			<modulesourcepath refid="modulesourcepath.main"/>
			<modulepath refid="modulepath.main"/>
			<classpath refid="classpath.main"/>
			<arg value="--add-reads=${project.moduleprefix}=ALL-UNNAMED"/>
			<arg value="--add-reads=${project.moduleprefix}.ant=ALL-UNNAMED"/>
			<arg value="--add-reads=${project.moduleprefix}.processors=ALL-UNNAMED"/>
			<!--arg value="-Xdoclint:missing,reference,syntax"/-->
			<arg value="-Xdoclint:all"/>
			<arg value="-Xdoclint/package:-${project.moduleprefix}.runtime.parser"/>
			<arg value="-Xmaxwarns"/>
			<arg value="1000"/>
			<link href="file://${config.javadocdir.java}"/>
			<link href="https://ant.apache.org/manual/api/"/>
			<link href="file://${config.javadocdir.junit4}"/>
			<link href="file://${config.javadocdir.jline1}"/>
			<link href="file://${config.javadocdir.clianthus}"/>
		</javadoc>
	</target>

	<target name="copy.resources"
		description="Copy resources"
		>
		<copy todir="${target.modules}">
			<fileset dir="${src.main.resources}" includes="**"/>
		</copy>
		<mkdir dir="${target.modules}/${project.moduleprefix}/META-INF/licenses"/>
		<copy
			todir="${target.modules}/${project.moduleprefix}/META-INF/licenses"
			file="LICENSE"
			/>
		<echoproperties
			destfile="${target.modules}/${project.moduleprefix}/coneforest/psylla/runtime/Config.properties"
			>
			<propertyset>
				<propertyref prefix="config."/>
				<propertyref prefix="project."/>
			</propertyset>
		</echoproperties>
		<mkdir
			dir="${target.modules}/${project.moduleprefix}/META-INF/maven/${project.maven.groupId}/${project.maven.artifactId}"
			/>
		<echoproperties
			destfile="${target.modules}/${project.moduleprefix}/META-INF/maven/${project.maven.groupId}/${project.maven.artifactId}/pom.properties"
			>
			<propertyset>
				<propertyref prefix="project.maven."/>
				<mapper type="glob" from="project.maven.*" to="*"/>
			</propertyset>
		</echoproperties>
	</target>

	<target name="jar"
		description="Build Jar"
		depends="compile"
		>
		<jar
			jarfile="${target.artifacts.jars}/${project.moduleprefix}-${project.version}.jar"
			basedir="${target.modules}/${project.moduleprefix}"
			>
			<manifest>
				<attribute name="Main-Class" value="${project.moduleprefix}.${project.title}"/>
				<attribute name="Specification-Title" value="${project.title}"/>
				<attribute name="Specification-Version" value="${project.version}"/>
				<attribute name="Specification-Vendor" value="${project.developer.name}"/>
				<attribute name="Implementation-Title" value="${project.moduleprefix}"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
				<attribute name="Implementation-Vendor" value="${project.developer.name}"/>
			</manifest>
		</jar>
		<jar
			jarfile="${target.artifacts.jars}/${project.moduleprefix}.ant-${project.version}.jar"
			basedir="${target.modules}/${project.moduleprefix}.ant"
			>
			<manifest>
				<attribute name="Specification-Title" value="${project.title} Ant tasks"/>
				<attribute name="Specification-Version" value="${project.version}"/>
				<attribute name="Specification-Vendor" value="${project.developer.name}"/>
				<attribute name="Implementation-Title" value="${project.moduleprefix}.processors"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
				<attribute name="Implementation-Vendor" value="${project.developer.name}"/>
			</manifest>
		</jar>
		<jar
			jarfile="${target.artifacts.jars}/${project.moduleprefix}.processors-${project.version}.jar"
			basedir="${target.modules}/${project.moduleprefix}.processors"
			>
			<manifest>
				<attribute name="Specification-Title" value="${project.title} annotation processors"/>
				<attribute name="Specification-Version" value="${project.version}"/>
				<attribute name="Specification-Vendor" value="${project.developer.name}"/>
				<attribute name="Implementation-Title" value="${project.moduleprefix}.processors"/>
				<attribute name="Implementation-Version" value="${project.version}"/>
				<attribute name="Implementation-Vendor" value="${project.developer.name}"/>
			</manifest>
		</jar>
	</target>

	<target name="pom"
		description="Generate POM"
		>
		<ivy:makepom
			ivyfile="ivy.xml"
			templatefile="${src.maven}/${project.moduleprefix}.pom"
			pomfile="${target.artifacts.poms}/${project.moduleprefix}-${project.version}.pom"
			description="${project.title}"
			>
			<ivy:mapping conf="default" scope="runtime"/>
		</ivy:makepom>
		<ivy:makepom
			ivyfile="ivy.xml"
			artifactName="${project.maven.artifactId}.ant"
			templatefile="${src.maven}/${project.moduleprefix}.pom"
			pomfile="${target.artifacts.poms}/${project.moduleprefix}.ant-${project.version}.pom"
			description="${project.title} Ant tasks"
			>
			<ivy:mapping conf="default" scope="runtime"/>
		</ivy:makepom>
		<ivy:makepom
			ivyfile="ivy.xml"
			artifactName="${project.maven.artifactId}.processors"
			templatefile="${src.maven}/${project.moduleprefix}.pom"
			pomfile="${target.artifacts.poms}/${project.moduleprefix}.processors-${project.version}.pom"
			description="${project.title} annotation processors"
			>
			<ivy:mapping conf="default" scope="runtime"/>
		</ivy:makepom>
	</target>

	<target name="artifacts"
		description="Build artifacts"
		depends="jar,pom"
		/>

	<target name="clean" description="Clean build directory">
		<delete dir="${target}"/>
	</target>

	<target name="test" description="Perform general tests"
		depends="test.anttask,test.jsr223,test.psylla"/>

	<target name="htmldocs"
		description="Build XHTML documentation"
		depends="htmldocs.htmldocs"
		/>

	<target name="manpages"
		description="Build manpages"
		depends="manpages.manpages"
		/>

	<target name="dist.zip" description="Make Zip distribution">
		<mkdir dir="${target}/tmp/${project.name}-${project.version}"/>
		<copy todir="${target}/tmp/${project.name}-${project.version}">
			<fileset
				dir="."
				includes="src/** build.xml README LICENSE AUTHORS"
				/>
		</copy>
		<zip
			destfile="${target}/${project.name}-${project.version}.zip"
			basedir="${target}/tmp"
			>
			<fileset
				dir="${target}/tmp"
				includes="${project.name}-${project.version}/**"
				/>
		</zip>
		<delete dir="${target}/tmp" quiet="yes"/>
	</target>

	<target name="dist.tar"
		description="Make Tar distribution"
		>
		<mkdir dir="${target}"/>
		<exec outputproperty="git.stashname" executable="git">
			<arg value="stash"/>
			<arg value="create"/>
		</exec>
		<condition property="git.object" value="HEAD" else="${git.stashname}">
			<length string="${git.stashname}" when="eq" length="0"/>
		</condition>
		<echo message="${git.object}"/>
		<exec executable="git">
			<arg value="archive"/>
			<arg value="--prefix=${project.name}-${project.version}/"/>
			<arg value="--output=${target}/${project.name}-${project.version}.tar.xz"/>
			<arg value="${git.object}"/>
			<arg value="--"/>
			<arg value="build.xml"/>
			<arg value="ivy.xml"/>
			<arg value="src"/>
			<arg value="README"/>
			<arg value="LICENSE"/>
			<arg value="AUTHORS"/>
		</exec>
	</target>

	<target name="build"
		description="Build project"
		depends="artifacts,docs"
		>
		<copy tofile="${target.bin}/${project.name}" file="${src.bin}/${project.name}-${linux.flavour}"/>
		<chmod file="${target.bin}/${project.name}" perm="ugo+rx"/>
		<copy todir="${target.doc}">
			<fileset dir="." includes="README LICENSE AUTHORS"/>
			<fileset dir="${src}" includes="examples/**/*"/>
		</copy>
		<copy todir="${target.vim}">
			<fileset dir="${src.vim}" includes="**/*"/>
		</copy>
		<copy todir="${target.mime}">
			<fileset dir="${src.mime}" includes="**/*"/>
		</copy>
	</target>

	<target name="docker.build">
		<exec executable="docker">
			<arg value="build"/>
			<arg value="-t${project.developer.id}/${project.name}:${project.version}"/>
			<arg value="."/>
		</exec>
	</target>

	<target name="deploy"
		description="Deploy to GitHub Package Registry"
		depends="artifacts"
		>
		<ivy:publish
			resolver="github-packages-psylla"
			overwrite="true"
			forcedeliver="true"
			/>
	</target>

	<target name="spotbugs"
		description="Generate SpotBugs report"
		depends="jar"
		>
		<mkdir dir="${target.reports}"/>
		<taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
		<spotbugs
			projectName="${project.name}"
			home="${config.datadir}/spotbugs"
			output="html"
			effort="max"
			outputFile="${target.reports}/spotbugs.html"
			excludeFilter="${etc}/spotbugs-exclude.xml"
			debug="true"
			timestampNow="true"
			stylesheet="fancy-hist.xsl"
			>
			<sourcepath refid="modulesourcepath.main"/>
			<auxClasspath>
				<pathelement location="${config.javadir}/coneforest.clianthus.jar"/>
				<pathelement location="${config.jar.jline1}"/>
			</auxClasspath>
			<class
				location="${target.artifacts.jars}/${project.moduleprefix}-${project.version}.jar"/>
			<class
				location="${target.artifacts.jars}/${project.moduleprefix}.tools-${project.version}.jar"/>
		</spotbugs>
	</target>

	<target name="checkstyle"
		description="Generate CheckStyle report"
		depends="compile.jj"
		>
		<mkdir dir="${target.reports}"/>
		<cs:checkstyle
			config="${etc}/checkstyle.xml"
			maxErrors="10000"
			failOnViolation="false"
			>
			<fileset dir="${src.main.java}">
				<exclude name="**/parser/*.java"/>
			</fileset>
			<fileset dir="${src.examples.java}"/>
			<fileset dir="${src.main.jj}"/>
			<fileset dir="${src.main.resources}"/>
			<fileset dir="${src.doc.docbook}"/>
			<formatter type="plain" toFile="${target.reports}/checkstyle.txt"/>
		</cs:checkstyle>
	</target>

	<target name="coverage"
		description="Generate coverage report"
		depends="jacoco.report"
		/>

</project>
