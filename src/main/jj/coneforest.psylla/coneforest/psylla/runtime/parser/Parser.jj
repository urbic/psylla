options
{
	JDK_VERSION="21";
}

PARSER_BEGIN(Parser)

package coneforest.psylla.runtime.parser;

import coneforest.psylla.core.PsyReader;

/**
*	The Psylla language parser.
*/
@SuppressWarnings("javadoc")
public class Parser
{
	/**
	*	Constructs a new parser over given {@code reader} object.
	*
	*	@param oReader the {@code reader} object.
	*/
	public Parser(final PsyReader oReader)
	{
		this(oReader.reader());
	}
}

PARSER_END(Parser)

SKIP:
{
	" " | "\n" | "\r" | "\t" | "\f" | "\u00A0"
}

TOKEN:
{
	<#SIGN: ["-", "+"]>
}

TOKEN:
{
	<#DIGIT: ["0"-"9"]>
}

TOKEN:
{
	<#HEXDIGIT: <DIGIT> | ["A"-"F", "a"-"f"]>
}

TOKEN:
{
	<#LETTER: ["A"-"Z", "a"-"z"]>
}

TOKEN:
{
	<INTEGRAL:
		<INTEGRAL_DEC>
			| <INTEGRAL_HEX>
			| <INTEGRAL_BIN>
			| <INTEGRAL_OCT>
			| <INTEGRAL_CHR>
	>
}

TOKEN:
{
	<#INTEGRAL_DEC_UNSIGNED: (<DIGIT>)+>
}

TOKEN:
{
	<#INTEGRAL_DEC: (<SIGN>)? <INTEGRAL_DEC_UNSIGNED>>
}

TOKEN:
{
	<#INTEGRAL_HEX: ["X", "x"] "`" (<SIGN>)? (<HEXDIGIT>)+>
}

TOKEN:
{
	<#INTEGRAL_BIN: ["B", "b"] "`" (<SIGN>)? (["0", "1"])+>
}

TOKEN:
{
	<#INTEGRAL_OCT: ["O", "o"] "`" (<SIGN>)? (["0"-"7"])+>
}

TOKEN:
{
	<#INTEGRAL_CHR: ["C", "c"] "`" (~["\\"] | <STRING_SPECIAL>)>
}

TOKEN:
{
	<#REAL_UNSIGNED:
		(
			<INTEGRAL_DEC_UNSIGNED> ("." (<DIGIT>)*)?
				| "." <INTEGRAL_DEC_UNSIGNED>
				| "âˆž"
		)
		(<EXPONENT>)?
	>
}

TOKEN:
{
	<#EXPONENT: ["E", "e"] <INTEGRAL_DEC>>
}

TOKEN:
{
	<REAL: (<SIGN>)? <REAL_UNSIGNED>>
}

TOKEN:
{
	<COMMENT: <COMMENT_ONELINE> | <COMMENT_MULTILINE>>
}

TOKEN:
{
	<#COMMENT_ONELINE: "#" (~["\n"])* "\n">
}

TOKEN:
{
	<#COMMENT_MULTILINE: "/#" (~["/"] | ("/" ~["#"]))* "#/">
}

TOKEN:
{
	<STRINGBUFFER: "\"" (<STRING_SPECIAL> | "\\\"" | ~["\"", "\\"])* "\"">
}

TOKEN:
{
	<STRING: <STRING_SLASHED> | <STRING_QUOTED>>
}

TOKEN:
{
	<#STRING_SLASHED: "/" <NAME>>
}

TOKEN:
{
	<#STRING_QUOTED: "'" (<STRING_SPECIAL> | "\\'" | ~["'", "\\"])* "'">
}

TOKEN:
{
	<#STRING_SPECIAL:
		"\\"
		(
			["0", "a", "n", "t", "f", "\\", "e", "r", "v", "\n"]
				| "u" <HEXDIGIT> <HEXDIGIT> <HEXDIGIT> <HEXDIGIT>
				| "x{" (<HEXDIGIT>)+ "}"
				| "N{" (["A"-"Z", "0"-"9", " ", "-"])+ "}"
				| "c" ["\u0000"-"\u00FF"]
		)
	>
}

TOKEN:
{
	<REGEXP:
		"~" (<STRING_SPECIAL> | <REGEXP_SPECIAL> | ~["~", "\\"])* "~"
	>
}

TOKEN:
{
	<#REGEXP_SPECIAL: "\\" ~[]>
}

TOKEN:
{
	<IMMEDIATE: "/" <STRING_SLASHED>>
}

TOKEN:
{
	<#NAME_UNQUALIFIED:
		(<LETTER> | <STRING_SPECIAL_CHAR>)
		(<LETTER> | <STRING_SPECIAL_CHAR> | <DIGIT>)*
			| ["[", "]", "(", ")", "<", ">", "=", "?"]
	>
}

TOKEN:
{
	<NAME: <NAME_UNQUALIFIED> ("@" <NAME_UNQUALIFIED>)?>
}

TOKEN:
{
	<LITERAL: <NAME> "=%" ("\\%" | ~["%", "\\"])* "%">
}

TOKEN:
{
	<OPEN_BRACE: "{">
}

TOKEN:
{
	<CLOSE_BRACE: "}">
}

TOKEN:
{
	<#STRING_SPECIAL_CHAR: ["_", ".", "-", "+", "=", "$"]>
}
