<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="PsyllaReference_Installation">
<title>Installation</title>

<section xml:id="PsyllaReference_Installation_Prebuilt">
<title>Pre-built binary Packages</title>

<para>
Pre-built binary packages for <productname>openSUSE</productname>,
<productname>Debian</productname>, <productname>Ubuntu</productname> and
<productname>Raspbian</productname> are available at <link
xlink:href="https://software.opensuse.org/download.html?project=home%3Aurbic%3Aconeforest&amp;package=psylla">openSUSE
Build Service</link>.
</para>

</section>

<section xml:id="PsyllaReference_Installation_BuildingFromSources">
<title>Building from Sources</title>

<section xml:id="PsyllaReference_Installation_BuildingFromSources_Prerequisites">
<title>Prerequisites</title>

<itemizedlist>

<listitem><application>Java 21</application> (<application
xlink:href="https://openjdk.java.net/">OpenJDK</application> or <application
xlink:href="https://www.oracle.com/java/technologies/javase-downloads.html">Oracle
JDK</application>)</listitem>

<listitem><application xlink:href="http://javacc.org">JavaCC</application>
7.0.4</listitem>

<listitem><application xlink:href="https://ant.apache.org/">Apache
Ant</application> 1.10.9</listitem>

<listitem><application xlink:href="https://ant.apache.org/">Ant Apache Resolver
Task</application> 1.10.9</listitem>

<listitem><application xlink:href="https://ant.apache.org/">Ant Junit
Task</application> 1.10.9</listitem>

<listitem><application xlink:href="https://www.junit.org/">JUnit</application>
4</listitem>

<listitem><application
xlink:href="https://jline.github.io/">JLine</application> 1</listitem>

<listitem><application xlink:href="https://saxon.sourceforge.net/">Saxon
HE</application> 6</listitem>

<listitem><application
xlink:href="https://github.com/docbook/xslt10-stylesheets/">Docbook 5 XSLT
Stylesheets</application> 1.79.2</listitem>

<listitem><application
xlink:href="https://sourceforge.net/projects/xslthl/">XSLTHL</application>
2.1.3</listitem>

<listitem><application
xlink:href="https://sourceforge.net/projects/docbook/">Docbook XSL
Saxon</application> 1.0.0</listitem>

<listitem><application
xlink:href="https://www.graphviz.org/">Graphviz</application> 2.40.1</listitem>

<listitem><application
xlink:href="https://github.com/sass/sassc/">SassC</application>
3.5.0</listitem>

</itemizedlist>

<para>
To install dependencies, run (<productname>openSUSE Leap 15.6</productname>)

<screen><prompt>% </prompt><userinput>sudo zypper -n --gpg-auto-import-keys ar -p1 \
	obs://home:urbic:coneforest/15.6 home:urbic:coneforest</userinput>
<prompt>% </prompt><userinput>sudo zypper -n --gpg-auto-import-keys in -y \
	ant{,-apache-resolver,-junit} javacc jline1 \
	docbook5-xsl-stylesheets docbook-xsl-saxon graphviz sassc saxon6 \
	glibc-locale javapackages-tools xslthl</userinput></screen>

or (<productname>Debian 11</productname>)

<screen><prompt>% </prompt><userinput>sudo apt-get install -y \
	ant{,-optional} docbook-{xsl-{ns,saxon},mathml} \
	graphviz sassc javacc junit4 libjline-java{,-doc} libxerces2-java \
	libxslthl-java openjdk-21-{jdk-headless,doc}</userinput></screen>
</para>

</section>

<section
xml:id="PsyllaReference_Installation_ObtainingSources">
<title>Obtaining Sources</title>

<para>
The sources are available in the <link
xlink:href="https://github.com/urbic/psylla">project repository</link> hosted
on GitHub.
</para>

<para>
To build a project, you first need to clone the repository. To do this, run the
command

<screen><prompt>% </prompt><userinput>git clone --depth=1 https://github.com/urbic/psylla.git</userinput></screen>

</para>

</section>

<section
xml:id="PsyllaReference_Installation_BuildingFromSources_Building">
<title>Building</title>

<para>
After cloning the project repository, a new subdirectory named
<filename>psylla</filename> is created in the current directory. Change to it:

<screen><prompt>% </prompt><userinput>cd psylla</userinput></screen>

</para>

<para>
The Psylla build process uses <link xlink:href="http://ant.apache.org">Apache
Ant</link> as a build tool. Run

<screen><prompt>% </prompt><userinput>ant build</userinput></screen>

</para>

<para>
The build process expects that the required resources are located in proper
places. Since different operating systems use different file arrangement
conventions, you may need to to explicitly specify such locations via
properties:

<screen><prompt>% </prompt><userinput>ant build -D<replaceable>property</replaceable>=<replaceable>value</replaceable> …</userinput></screen>

Default values of the properties are chosen to satisfy the conventions of the
<productname>openSUSE Leap 15.5</productname>. For
<productname>Debian</productname>, <productname>Ubuntu</productname>,
<productname>Raspbian</productname> specify

<screen><prompt>% </prompt><userinput>ant build -Dlinux.flavour=debian</userinput></screen>

<variablelist>
<varlistentry>
<term>
<property>linux.flavour</property>
</term>
<listitem>
the Linux flavour, either <literal>redhat</literal> (default) or
<literal>debian</literal>.
</listitem>
</varlistentry>
</variablelist>

<variablelist>
<varlistentry>
<term>
<property>config.jar.jline1</property>
</term>
<term>
<property>config.jar.junit4</property>
</term>
<term>
<property>config.jar.saxon6</property>
</term>
<term>
<property>config.jar.docbook-xsl-saxon</property>
</term>
<term>
<property>config.jar.xml-commons-apis</property>
</term>
<term>
<property>config.jar.xslthl</property>
</term>
<term>
<property>config.jar.xerces</property>
</term>
<listitem>
locations of required JAR files.
</listitem>
</varlistentry>
</variablelist>

<variablelist>
<varlistentry>
<term>
<property>config.javadocdir.java</property>
</term>
<term>
<property>config.javadocdir.junit4</property>
</term>
<term>
<property>config.javadocdir.jline1</property>
</term>
<listitem>
locations of API documentation directopies.
</listitem>
</varlistentry>
</variablelist>

</para>

<para>
To view build target descriptions, run

<screen><prompt>% </prompt><userinput>ant -p</userinput></screen>
</para>

</section>

<section
xml:id="PsyllaReference_Installation_BuildingFromSources_Testing">
<title>Testing</title>

<para>
To perform unit tests, run

<screen><prompt>% </prompt><userinput>ant test</userinput>
<computeroutput>…
BUILD SUCCESSFUL
Total time: 1 second</computeroutput></screen>
</para>

<para>
After a successfull build, you can run the Psylla one-liner program directly
from the command line:

<screen><prompt>% </prompt><userinput>./psylla.sh -e '1 1 1 7 { mul } for ?'</userinput>
<computeroutput>5040</computeroutput></screen>

(this program calculates the factorial of the seven).
</para>

<para>
Alternatively, you can run one of example programs

<screen><prompt>% </prompt><userinput>./psylla.sh src/examples/psylla/primes-eratosthenes-bitarray-optimized.psy 100</userinput>
<computeroutput>2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97</computeroutput></screen>

(this program calculates all primes up to a given number).
</para>

<para>
You also can run into interactive session:

<screen><prompt>% </prompt><userinput>./psylla.sh</userinput>
<computeroutput>Psylla v&psylla.version;
Copyright © 2014—2025 Anton Shvetz

</computeroutput><prompt>PSYLLA&gt; </prompt><userinput>2 sqrt ?</userinput>
<computeroutput>1.4142135623730951
</computeroutput><prompt>PSYLLA&gt; </prompt><userinput>quit</userinput></screen>
</para>

</section>

</section>

</chapter>
