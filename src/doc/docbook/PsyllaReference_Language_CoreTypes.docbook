<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="PsyllaReference_Language_CoreTypes">
<title>Core Types</title>

<para>
All data in the Psylla language exist in form of
<firstterm>objects</firstterm><indexterm><primary>object</primary></indexterm>.
Most of the objects created and handled by operators. Some types of objects are
also created by the parser and executed by the interpreter.
</para>

<para>
Each object belongs to a certain
<firstterm>type</firstterm><indexterm><primary>type</primary></indexterm>.
Object type affects the way that the object will be handled by operators. Types
are divided into
<firstterm>simple</firstterm><indexterm><primary>type</primary><secondary>simple</secondary></indexterm>
and
<firstterm>complex</firstterm><indexterm><primary>type</primary><secondary>complex</secondary></indexterm>.
</para>

<para>
Objects of simple types can not be changed, they are only created as the result
of calculations. For example, the <xref xrefstyle="template:%t"
linkend="PsyllaReference_Operators_Details_neg"/> operator does not change the
sign of the number itself, but creates a new numeric object with opposite
sign.
</para>

<para>
The objects of complex types can change its state. For example, the <xref
xrefstyle="template:%t" linkend="PsyllaReference_Operators_Details_put"/> operator
replaces the array element having the given index.
</para>

<para>
The following is a summary of simple and complex types composing the Psylla
language core. Language extensions may introduce new object types.
</para>

<informaltable frame="none" pgwide="1">
<tgroup cols="2" colsep="0">
<tbody valign="top">
<row>
<entry>
<itemizedlist>
<title>Simple Types</title>
<listitem><xref linkend="PsyllaReference_Types_Details_biginteger" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_boolean" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_complex" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_integer" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_mark" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_name" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_null" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_operator" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_real" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_regexp" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_string" xrefstyle="template:%t"/></listitem>
</itemizedlist>
</entry>
<entry>
<itemizedlist>
<title>Complex Types</title>
<listitem><xref linkend="PsyllaReference_Types_Details_array" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_bitarray" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_bitset" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_dict" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_input" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_lock" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_matcher" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_output" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_proc" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_random" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_reader" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_set" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_stringbuffer" xrefstyle="template:%t"/></listitem>
<listitem><xref linkend="PsyllaReference_Types_Details_writer" xrefstyle="template:%t"/></listitem>
</itemizedlist>
</entry>
</row>
</tbody>
</tgroup>
</informaltable>

<section xml:id="PsyllaReference_Language_CoreTypes_Operators">
<title>Operators</title>

<para>
An
<firstterm>operator</firstterm><indexterm><primary>operator</primary></indexterm>
in the Psylla language represents a code that manipulates the interpreter. The
oparator objects have the <xref
linkend="PsyllaReference_Types_Details_operator" xrefstyle="template:%t"/>
type. All core operators are initially placed in the system dictionary and
accessible by their names. Operators can not be created or modified by the
Psylla program.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Numbers">
<title>Numbers</title>

<para>
The Psylla language provides four numeric types: integer (<xref
linkend="PsyllaReference_Types_Details_integer" xrefstyle="template:%t"/>), real
(<xref linkend="PsyllaReference_Types_Details_real" xrefstyle="template:%t"/>),
complex (<xref linkend="PsyllaReference_Types_Details_complex"
xrefstyle="template:%t"/>), and big integer (<xref
linkend="PsyllaReference_Types_Details_biginteger" xrefstyle="template:%t"/>).
</para>

<para>
The integer numeric object represents a mathematical integer number in the
range from −2<superscript>63</superscript> to 2<superscript>63</superscript>−1
inclusive.
</para>

<para>
The real numeric object represents a mathematical real number in much larger
range, but with limited accuracy, and is implemented as a floating-point number.
</para>

<para>
The complex numeric object represents a mathematical complex number. It is
implemented as a pair of real numbers, real and imaginary parts of a number.
</para>

<para>
The big integer numeric object represents a mathematical integer number of
arbitrary magnitude.
</para>

<para>
Most of mathematical operators can be applied to operands of all four types,
performing the required type conversion if necessary.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Booleans">
<title>Booleans</title>

<para>
Boolean objects (<xref linkend="PsyllaReference_Types_Details_boolean"
xrefstyle="template:%t"/>) represents logical values “false” and “true”. Their
main purpose is to serve as operands for conditional control operators <xref
linkend="PsyllaReference_Operators_Details_if" xrefstyle="template:%t"/> and <xref
linkend="PsyllaReference_Operators_Details_ifelse" xrefstyle="template:%t"/>. Both
boolean objects present in the system dictionary under the names of <xref
linkend="PsyllaReference_Operators_Details_false" xrefstyle="template:%t"/> and
<xref linkend="PsyllaReference_Operators_Details_true" xrefstyle="template:%t"/>.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Marks">
<title>Mark</title>

<para>
The
<firstterm>mark</firstterm><indexterm><primary>mark</primary></indexterm> is
the sole object of type <xref linkend="PsyllaReference_Types_Details_mark"
xrefstyle="template:%t"/>. It serves to indicate the position in the operand
stack.  The mark present in the system dictionary under the names of <xref
linkend="PsyllaReference_Operators_Details_mark" xrefstyle="template:%t"/>
(<xref linkend="PsyllaReference_Operators_Details_[" xrefstyle="template:%t"/>,
<xref linkend="PsyllaReference_Operators_Details_&lt;"
xrefstyle="template:%t"/>, <xref linkend="PsyllaReference_Operators_Details_("
xrefstyle="template:%t"/>). Basically mark serves as operand for operators
<xref linkend="PsyllaReference_Operators_Details_arraytomark"
xrefstyle="template:%t"/> (<xref linkend="PsyllaReference_Operators_Details_]"
xrefstyle="template:%t"/>), <xref
linkend="PsyllaReference_Operators_Details_dicttomark"
xrefstyle="template:%t"/> (<xref
linkend="PsyllaReference_Operators_Details_&gt;" xrefstyle="template:%t"/>),
<xref linkend="PsyllaReference_Operators_Details_settomark"
xrefstyle="template:%t"/> (<xref linkend="PsyllaReference_Operators_Details_)"
xrefstyle="template:%t"/>), <xref
linkend="PsyllaReference_Operators_Details_streamtomark"
xrefstyle="template:%t"/>, <xref
linkend="PsyllaReference_Operators_Details_counttomark"
xrefstyle="template:%t"/>, <xref
linkend="PsyllaReference_Operators_Details_cleartomark"
xrefstyle="template:%t"/>, <xref
linkend="PsyllaReference_Operators_Details_fork" xrefstyle="template:%t"/>.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Nulls">
<title>Null object</title>

<para>
A special <xref linkend="PsyllaReference_Types_Details_null"
xrefstyle="template:%t"/> type contains the sole object. This object serves as a
placeholder in containers whose elements have not yet been initialized. Mostly
null objects appear in arrays when their size increase. Null object present in
the system dictionary under the name <xref
linkend="PsyllaReference_Operators_Details_null" xrefstyle="template:%t"/>. It can
not be the operand for most operators.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Names">
<title>Names</title>

<para>
A <firstterm>name</firstterm><indexterm><primary>name</primary></indexterm>
object (<xref linkend="PsyllaReference_Types_Details_string"
xrefstyle="template:%t"/>) represents an immutable string. The names are
mostly used as keys in the dictionaries associated to corresponding values.
Every core operator is stored in the system dictionary under its own name.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Commands">
<title>Commands</title>

<para>
The
<firstterm>commands</firstterm><indexterm><primary>command</primary></indexterm>
(<firstterm>executable
names</firstterm><indexterm><primary>name</primary><secondary>executable</secondary></indexterm>)
differ from the names in execution semantics. The execution of the command
leads to the search of the object associated with it in the dictionary stack,
and the subsequent invocation of the found object.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Arrays">
<title>Arrays</title>

<para>
The <firstterm>array</firstterm><indexterm><primary>array</primary></indexterm>
is a container for objects numbered with non-negative integer numbers
(<firstterm>indices</firstterm><indexterm><primary>index</primary><secondary>array</secondary></indexterm>).
Arrays in the Psylla language are
<firstterm>heterogeneous</firstterm><indexterm><primary>array</primary><secondary>heterogeneous</secondary></indexterm>,
that is, the array elements can be objects of any type. In particular, the
arrays may contain other containers (arrays, dictionaries, sets), which allows
the construction of multi-dimensional data structures of any complexity.
</para>

<para>
The array indexing is zero-based. When accessing the array elements, the index
boundary checks are performed. In case the index runs beyond the boundaries,
the <xref linkend="PsyllaReference_Errors_Details_rangecheck"
xrefstyle="template:%t"/> error is generated.
</para>

<para>
The length of the array changes when inserting or removing elements.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Procedures">
<title>Procedures</title>

<para>
A
<firstterm>procedure</firstterm><indexterm><primary>procedure</primary></indexterm>
(<firstterm>executable
array</firstterm><indexterm><primary>array</primary><secondary>executable</secondary></indexterm>)
differ from the array in execution semantics. The execution of the procedure
leads to sequential execution of all its elements.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Strings">
<title>Strings</title>

<para>
A <firstterm>string</firstterm><indexterm><primary>string</primary></indexterm>
conceptually arranged as an array whose elements are integers between 0 and
65535 inclusive (<firstterm>code units</firstterm><indexterm><primary>code
unit</primary></indexterm>).
</para>

<para>
Strings are used to store text. Each character of text is represented by one or
two code units in accordance with the encoding
<firstterm><acronym>UTF-16</acronym></firstterm><indexterm><primary>UTF-16</primary></indexterm>.
One code unit encodes a character of the <firstterm>basic multilingual
plane</firstterm><indexterm><primary>basic multilingual
plane</primary></indexterm>
(<acronym>BMP</acronym><indexterm><primary><acronym>BMP</acronym></primary><see><acronym>basic
multilingual plane</acronym></see></indexterm>).  The remaining Unicode
characters are encoded with so-called <firstterm>surrogate
pairs</firstterm><indexterm><primary>surrogate pair</primary></indexterm>.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_Dictionaries">
<title>Dictionaries</title>

<para>
A
<firstterm>dictionary</firstterm><indexterm><primary>dictionary</primary></indexterm>
is a container for objects indexed with names. Such structures also called
<firstterm>associative
arrays</firstterm><indexterm><primary>array</primary><secondary>associative</secondary></indexterm>.
</para>

<para>
The interpreter intensively uses dictionaries to associate objects (typically
operators and procedures) with names. Each time the parser detects a command,
the interpreter searches the dictionary stack for an object associated with the
name of the command, and then executes the found object.
</para>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps">
<title>Regular Expressions</title>

<para>
<firstterm>Regular expression</firstterm><indexterm><primary>regular
expression</primary></indexterm> represents a template for search in a string.
</para>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps_Characters">
<title>Characters</title>

<informaltable pgwide="1">
<tgroup cols="2">
<colspec colwidth="1*"/>
<colspec colwidth="3*"/>
<tbody>
<row>
<entry><literal><replaceable>X</replaceable></literal></entry>
<entry>character <replaceable>X</replaceable></entry>
</row>
<row>
<entry><literal><replaceable>\0</replaceable></literal></entry>
<entry>null character</entry>
</row>
<row>
<entry><literal>\\</literal></entry>
<entry>backslash character, <constant>U+5C</constant></entry>
</row>
<row>
<entry><literal>\u<replaceable>HHHH</replaceable></literal></entry>
<entry>character <constant>U+<replaceable>HHHH</replaceable></constant></entry>
</row>
<row>
<entry><literal>\x{<replaceable>H…H</replaceable>}</literal></entry>
<entry>character <constant>U+<replaceable>H…H</replaceable></constant></entry>
</row>
<row>
<entry><literal>\t</literal></entry>
<entry>tab character, <constant>U+9</constant></entry>
</row>
<row>
<entry><literal>\n</literal></entry>
<entry>end of line character, <constant>U+A</constant></entry>
</row>
<row>
<entry><literal>\r</literal></entry>
<entry>carriage-return character, <constant>U+D</constant></entry>
</row>
<row>
<entry><literal>\f</literal></entry>
<entry>line feed character, <constant>U+C</constant></entry>
</row>
<row>
<entry><literal>\a</literal></entry>
<entry>bell character, <constant>U+7</constant></entry>
</row>
<row>
<entry><literal>\e</literal></entry>
<entry>escape character, <constant>U+1B</constant></entry>
</row>
<row>
<entry><literal>\~</literal></entry>
<entry>tilde character <literal>~</literal>, <constant>U+7E</constant></entry>
</row>
<row>
<entry><literal>\c<replaceable>X</replaceable></literal></entry>
<entry>control+<replaceable>X</replaceable> character</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps_ExplicitCharacterClasses">
<title>Explicit Character Classes</title>

<informaltable pgwide="1">
<tgroup cols="2">
<colspec colwidth="1*"/>
<colspec colwidth="3*"/>
<tbody>
<row>
<entry><literal>[abc]</literal></entry>
<entry><literal>a</literal>, <literal>b</literal> or <literal>c</literal> (simple class)</entry>
</row>
<row>
<entry><literal>[^abc]</literal></entry>
<entry>any character except <literal>a</literal>, <literal>b</literal> and <literal>c</literal> (negation)</entry>
</row>
<row>
<entry><literal>[A-Za-z]</literal></entry>
<entry><literal>A</literal> through <literal>Z</literal> or
<literal>a</literal> through <literal>z</literal>, inclusive (range)</entry>
</row>
<row>
<entry><literal>[A-Z[0-9]]</literal></entry>
<entry><literal>A</literal> through <literal>Z</literal> or
<literal>a</literal> through <literal>z</literal> (union)</entry>
</row>
<row>
<entry><literal>[A-P&amp;&amp;[M-Z]]</literal></entry>
<entry><literal>P</literal> through <literal>M</literal> (intersection)</entry>
</row>
<row>
<entry><literal>[A-Z&amp;&amp;[^M-P]]</literal></entry>
<entry><literal>A</literal> through <literal>L</literal> or
<literal>Q</literal> through <literal>Z</literal> (subtraction)</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps_PredefinedCharacterClasses">
<title>Predefined Character Classes</title>

<informaltable pgwide="1">
<tgroup cols="2">
<colspec colwidth="1*"/>
<colspec colwidth="3*"/>
<tbody>
<row>
<entry><literal>.</literal></entry>
<entry>any character</entry>
</row>
<row>
<entry><literal>\d</literal></entry>
<entry>decimal digit, <literal>[0-9]</literal></entry>
</row>
<row>
<entry><literal>\D</literal></entry>
<entry>not decimal digit, <literal>[^0-9]</literal></entry>
</row>
<row>
<entry><literal>\s</literal></entry>
<entry>whitespace character, <literal>[ \t\n\r\f\x{0B}]</literal></entry>
</row>
<row>
<entry><literal>\S</literal></entry>
<entry>non-whitespace character, <literal>[^ \t\n\r\f\x{0B}]</literal></entry>
</row>
<row>
<entry><literal>\w</literal></entry>
<entry>word character, <literal>[A-Za-z_\d]</literal></entry>
</row>
<row>
<entry><literal>\W</literal></entry>
<entry>non-word character, <literal>[^A-Za-z_\d]</literal></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps_POSIXCharacterClasses">
<title><acronym>POSIX</acronym> Character Classes</title>

<remark>TODO</remark>

</section>

<section xml:id="PsyllaReference_Language_CoreTypes_RegExps_BoundaryAnchors">
<title>Boundary Anchors</title>

<informaltable pgwide="1">
<tgroup cols="2">
<colspec colwidth="1*"/>
<colspec colwidth="3*"/>
<tbody>
<row>
<entry><literal>^</literal></entry>
<entry>beginning of the string</entry>
</row>
<row>
<entry><literal>$</literal></entry>
<entry>end of the string</entry>
</row>
<row>
<entry><literal>\b</literal></entry>
<entry>word boundary</entry>
</row>
<row>
<entry><literal>\B</literal></entry>
<entry>not word boundary</entry>
</row>
<row>
<entry><literal>\A</literal></entry>
<entry>beginning of input</entry>
</row>
<row>
<entry><literal>\G</literal></entry>
<entry>end of input</entry>
</row>
<row>
<entry><literal>\Z</literal></entry>
<entry><remark>TODO</remark></entry>
</row>
<row>
<entry><literal>\z</literal></entry>
<entry><remark>TODO</remark></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>
