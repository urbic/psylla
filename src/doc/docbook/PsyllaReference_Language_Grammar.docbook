<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="PsyllaReference_Language_Grammar">
<title>Grammar</title>

<productionset>
<title>Grammar rules for tokens</title>

<production xml:id="PsyllaReference_Language_Grammar_Token">
<lhs>TOKEN</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_Integral">INTEGRAL</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_Real">REAL</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_StringBuffer">STRINGBUFFER</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_RegExp">REGEXP</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_Name">NAME</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_String">STRING</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_Immediate">IMMEDIATE</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_OpenBrace">OPEN_BRACE</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_CloseBrace">CLOSE_BRACE</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_Comment">COMMENT</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Sign">
<lhs>SIGN</lhs>
<rhs>[<literal>+</literal>, <literal>-</literal>]</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Digit">
<lhs>DIGIT</lhs>
<rhs>[<literal>0</literal> … <literal>9</literal>]</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_HexDigit">
<lhs>HEXDIGIT</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_Digit">DIGIT</nonterminal>
| [<literal>A</literal> … <literal>F</literal>,
<literal>a</literal> … <literal>f</literal>]
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Letter">
<lhs>LETTER</lhs>
<rhs>
[<literal>A</literal> … <literal>Z</literal>,
<literal>a</literal> … <literal>z</literal>]
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Integral">
<lhs>INTEGRAL</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_IntegralDec">INTEGRAL_DEC</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_IntegralHex">INTEGRAL_HEX</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_IntegralBin">INTEGRAL_BIN</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_IntegralOct">INTEGRAL_OCT</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralDecUnsigned">
<lhs>INTEGRAL_DEC_UNSIGNED</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_Digit">DIGIT</nonterminal>+
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralDec">
<lhs>INTEGRAL_DEC</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_Sign">SIGN</nonterminal>?
<nonterminal def="#PsyllaReference_Language_Grammar_IntegralDecUnsigned">INTEGRAL_DEC_UNSIGNED</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralHex">
<lhs>INTEGRAL_HEX</lhs>
<rhs>
[<literal>X</literal>, <literal>x</literal>]
<literal>`</literal>
<nonterminal def="#PsyllaReference_Language_Grammar_Sign">SIGN</nonterminal>?
<nonterminal def="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</nonterminal>+</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralOct">
<lhs>INTEGRAL_OCT</lhs>
<rhs>
[<literal>O</literal>, <literal>o</literal>]
<literal>`</literal>
<nonterminal def="PsyllaReference_Language_Grammar_Sign">SIGN</nonterminal>?
[<literal>0</literal> … <literal>7</literal>]+
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralBin">
<lhs>INTEGRAL_BIN</lhs>
<rhs>
[<literal>B</literal>, <literal>b</literal>]
<literal>`</literal>
<nonterminal def="PsyllaReference_Language_Grammar_Sign">SIGN</nonterminal>?
[<literal>0</literal>, <literal>1</literal>]+
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_IntegralChr">
<lhs>INTEGRAL_CHR</lhs>
<rhs>
[<literal>C</literal>, <literal>c</literal>]
<literal>`</literal>
(~[<literal>\</literal>]
| <nonterminal def="PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</nonterminal>)
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_RealUnsigned">
<lhs>REAL_UNSIGNED</lhs>
<rhs>
(<nonterminal def="PsyllaReference_Language_Grammar_IntegralDecUnsigned">INTEGRAL_DEC_UNSIGNED</nonterminal>
(<literal>.</literal>
<nonterminal>DIGIT</nonterminal>*)?
| <literal>.</literal>
<nonterminal def="PsyllaReference_Language_Grammar_IntegerUnsigned">INTEGER_UNSIGNED</nonterminal>)
<nonterminal def="PsyllaReference_Language_Grammar_Exponent">EXPONENT</nonterminal>?
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Real">
<lhs>REAL</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_Sign">SIGN</nonterminal>?
<nonterminal def="#PsyllaReference_Language_Grammar_RealUnsigned">REAL_UNSIGNED</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Exponent">
<lhs>EXPONENT</lhs>
<rhs>
[<literal>E</literal>, <literal>e</literal>]
<nonterminal def="#PsyllaReference_Language_Grammar_Integral">INTEGRAL</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Comment">
<lhs>COMMENT</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_CommentOneLine">COMMENT_ONELINE</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_CommentMultiline">COMMENT_MULTILINE</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_CommentOneLine">
<lhs>COMMENT_ONELINE</lhs>
<rhs>
<literal>#</literal>
(~[<constant>U+A</constant>])*
<constant>U+A</constant>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_CommentMultiline">
<lhs>COMMENT_MULTILINE</lhs>
<rhs>
<literal>/#</literal>
(~[<literal>/</literal>]
| (<literal>/</literal> ~[<literal>#</literal>]))*
<literal>#/</literal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_StringBuffer">
<lhs>STRINGBUFFER</lhs>
<rhs>
<literal>"</literal>
(<nonterminal def="#PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</nonterminal>
| ~[ <literal>"</literal>,
<literal>\</literal>])*
<literal>"</literal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_StringSpecial">
<lhs>STRING_SPECIAL</lhs>
<rhs>
<literal>\</literal>
([<literal>0</literal>,
<literal>a</literal>,
<literal>n</literal>,
<literal>t</literal>,
<literal>f</literal>,
<literal>"</literal>,
<literal>\</literal>,
<literal>e</literal>,
<literal>r</literal>,
<constant>U+A</constant>]
<sbr/>
| <literal>u</literal>
<nonterminal def="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</nonterminal>{4}
| <literal>x{</literal>
<nonterminal def="PsyllaReference_Language_Grammar_HexDigit">HEXDIGIT</nonterminal>+
<literal>}</literal>
<sbr/>
| <literal>c</literal>
[<constant>U+0</constant> … <constant>U+FF</constant>])
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_RegExp">
<lhs>REGEXP</lhs>
<rhs>
<literal>~</literal>
(<nonterminal def="#PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_RegExpSpecial">REGEXP_SPECIAL</nonterminal>
<sbr/>
| ~[<literal>~</literal>, <literal>\</literal>])*
<literal>~</literal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_RegExpSpecial">
<lhs>REGEXP_SPECIAL</lhs>
<rhs>
<literal>\</literal>
(~[])
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_StringSlashed">
<lhs>STRING_SLASHED</lhs>
<rhs>
<literal>/</literal>
<nonterminal def="#PsyllaReference_Language_Grammar_Name">NAME</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_StringQuoted">
<lhs>STRING_QUOTED</lhs>
<rhs>
<literal>'</literal>
(<nonterminal def="#PsyllaReference_Language_Grammar_StringSpecial">STRING_SPECIAL</nonterminal>
| <literal>\'</literal>
| ~[<literal>'</literal>, <literal>\</literal>])* <literal>'</literal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_String">
<lhs>STRING</lhs>
<rhs>
<nonterminal def="#PsyllaReference_Language_Grammar_StringSlashed">STRING_SLASHED</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_StringQuoted">STRING_QUOTED</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Immediate">
<lhs>IMMEDIATE</lhs>
<rhs>
<literal>/</literal>
<nonterminal def="#PsyllaReference_Language_Grammar_StringSlashed">STRING_SLASHED</nonterminal>
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_Name">
<lhs>NAME</lhs>
<rhs>
(<nonterminal def="#PsyllaReference_Language_Grammar_Letter">LETTER</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_StringSpecialChar">STRING_SPECIAL_CHAR</nonterminal>)
<sbr/>
(<nonterminal def="#PsyllaReference_Language_Grammar_Letter">LETTER</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_StringSpecialChar">STRING_SPECIAL_CHAR</nonterminal>
| <nonterminal def="#PsyllaReference_Language_Grammar_Digit">DIGIT</nonterminal>)*<sbr/>
| [<literal>[</literal>,
<literal>]</literal>,
<literal>(</literal>,
<literal>)</literal>,
<literal>&lt;</literal>,
<literal>&gt;</literal>,
<literal>=</literal>,
<literal>?</literal>]
</rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_OpenBrace">
<lhs>OPEN_BRACE</lhs>
<rhs><literal>{</literal></rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_CloseBrace">
<lhs>CLOSE_BRACE</lhs>
<rhs><literal>}</literal></rhs>
</production>

<production xml:id="PsyllaReference_Language_Grammar_StringSpecialChar">
<lhs>STRING_SPECIAL_CHAR</lhs>
<rhs>
[<literal>_</literal>,
<literal>.</literal>,
<literal>+</literal>,
<literal>-</literal>,
<literal>=</literal>,
<literal>$</literal>]
</rhs>
</production>

</productionset>

</section>
