<?xml version="1.0" encoding="UTF-8"?>
<project name="test"
	basedir="."
	xmlns:psylla="antlib:coneforest.psylla.ant"
	xmlns:jacoco="antlib:org.jacoco.ant"
	>

	<target name="test.psylla"
		description="Perform Psylla unit tests"
		depends="compile.java,copy.resources"
		>
		<mkdir dir="${target.reports}/junit"/>
		<mkdir dir="${src.test.data}/DIRECTORY-EMPTY"/>
		<mkdir dir="${src.test.data}/DIRECTORY-NONEMPTY/DIR-1"/>
		<mkdir dir="${src.test.data}/DIRECTORY-NONEMPTY/DIR-2/DIR-3"/>
		<taskdef uri="antlib:coneforest.psylla.ant">
			<classpath>
				<path refid="modulepath.main"/>
				<path refid="classpath.main"/>
			</classpath>
		</taskdef>
		<jacoco:agent property="jacoco.agent" destfile="${target.reports}/jacoco.exec"/>
		<psylla:psyllaunit
			haltonfailure="no"
			clonevm="yes"
			dir="."
			>
			<jvmarg value="${jacoco.agent}"/>
			<arg value="-LC"/>
			<arg value="-I${src.main.psylla}"/>
			<classpath>
				<path refid="modulepath.main"/>
				<path refid="classpath.main"/>
			</classpath>
			<formatter type="brief" usefile="false"/>
			<formatter type="xml"/>
			<test todir="${target.reports}/junit">
				<fileset dir="${src.test.psylla}" includes="**/*.t"/>
			</test>
		</psylla:psyllaunit>
		<junitreport todir="${target.reports}/junit">
			<fileset dir="${target.reports}/junit" includes="TEST-*.xml"/>
			<report format="noframes" todir="${target.reports}/junit/html">
				<param name="TITLE" expression="Psylla v${project.version}"/>
			</report>
		</junitreport>
	</target>

	<target name="jacoco.report"
		description="Generate JaCoCo report"
		depends="test.psylla"
		>
		<jacoco:report>
			<executiondata>
				<file file="${target.reports}/jacoco.exec"/>
			</executiondata>
			<structure name="Psylla v${project.version}">
				<classfiles>
					<fileset dir="${target.modules}/${project.moduleprefix}" includes="**/*.class"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.main.java}/${project.moduleprefix}" includes="**/*.java"/>
				</sourcefiles>
			</structure>
			<html destdir="${target.reports}/jacoco"/>
			<csv destfile="${target.reports}/jacoco/jacoco.csv"/>
		</jacoco:report>
	</target>

	<target name="test.anttask"
		description="Perform ant-task tests"
		depends="compile.java,copy.resources"
		>
		<taskdef uri="antlib:coneforest.psylla.ant">
			<classpath>
				<path refid="modulepath.main"/>
				<path refid="classpath.main"/>
			</classpath>
		</taskdef>
		<psylla:psylla eval="1 1 20 { tostring say } for"/>
		<psylla:psylla eval="1 atan 4 mul ?"/>
	</target>

	<target name="test.jsr223"
		description="Perform JSR 223 tests"
		depends="compile.java,copy.resources"
		>
		<script
			manager="javax"
			language="psylla"
			>
			<classpath refid="classpath.main"/>
			<classpath refid="modulepath.main"/>
			<![CDATA[1 1 20 { ? } for]]>
		</script>
		<script
			manager="javax"
			language="psylla"
			classpathref="classpath.main"
			>
			<classpath refid="classpath.main"/>
			<classpath refid="modulepath.main"/>
			<![CDATA[1 atan 4 mul ?]]>
		</script>
	</target>

	<target name="test.toolprovider"
		description="Perform ToolProvider test"
		depends="compile.java,copy.resources"
		>
		<java
			module="${project.moduleprefix}.examples/coneforest.psylla.examples.PsyllaToolProviderExample"
			clonevm="false"
			fork="true"
			>
			<modulepath refid="modulepath.main"/>
			<arg value="--add-reads=${project.moduleprefix}=ALL-UNNAMED"/>
			<arg value="--add-reads=${project.moduleprefix}.tools=ALL-UNNAMED"/>
		</java>
	</target>

	<target name="test.obs"
		description="Perform OBS build tests"
		>
		<antcall target="obs.build" inheritAll="false">
			<param name="obs.build.distro" value="15.6"/>
		</antcall>
		<antcall target="obs.build" inheritAll="false">
			<param name="obs.build.distro" value="openSUSE_Tumbleweed"/>
		</antcall>
		<antcall target="obs.build" inheritAll="false">
			<param name="obs.build.distro" value="Debian_11"/>
		</antcall>
		<!--antcall target="obs.build" inheritAll="false">
			<param name="obs.build.distro" value="xUbuntu_23.04"/>
		</antcall-->
	</target>

</project>
